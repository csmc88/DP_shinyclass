vect
names(vect)
c(11,2,NA)
vect2 <- c(11,2,NA)
names(vect2) <- c('foo','bar','norm')
vect2
names(vect2)
str(vect2)
names(vect2) <- c("foo","bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar"]
vect
vect[c("foo","bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myCapital
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(1:20,4,5)
identical(myMatrix,myMatrix2)
patients <- c('Bill','Gina','Kelly','Sean')
cbind(patients,myMatrix)
myData <- data.frame(patients,myMatrix)
myData
class(myData2)
class(myData)
cnames <- c('patient','age','weight','bp','rating','test')
fix(vect)
colnames(myData) <- cnames
colnames(myData2)
colnames('myData2')
info()
str(myData)
names(myData)
names(myData2)
ls()
colnames(myData) <- cnames
myData
bye()
getwd()
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam)
install.packages("caret")
rm(list = ls())
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
?createDataPartition
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("Hmisc")
library(Hmisc)
library(ggplot2)
version()
RVersion
version(R)
str(concrete)
ggplot(concrete, aes(x = 1:1030, y = CompressiveStrength)) + geom_point()
ggplot(concrete, aes(x = 1:1030, y = CompressiveStrength, colour = Cement)) + geom_point()
ggplot(concrete, aes(x = 1:1030, y = CompressiveStrength, colour = BlastFurnanceSlag)) + geom_point()
ggplot(concrete, aes(x = 1:1030, y = CompressiveStrength, colour = BlastFurnaceSlag)) + geom_point()
ggplot(concrete, aes(x = 1:1030, y = CompressiveStrength, colour = FlyAsh)) + geom_point()
ggplot(concrete, aes(x = 1:1030, y = CompressiveStrength, colour = Water)) + geom_point()
ggplot(concrete, aes(x = 1:1030, y = CompressiveStrength, colour = Superplasticizer)) + geom_point()
ggplot(concrete, aes(x = 1:1030, y = CompressiveStrength, colour = CoarseAggregate)) + geom_point()
ggplot(concrete, aes(x = 1:1030, y = CompressiveStrength, colour = Age)) + geom_point()
ggplot(concrete, aes(x = 1:1030, y = CompressiveStrength, colour = FineAggregate)) + geom_point()
ggplot(concrete, aes(x = 1:1030, y = CompressiveStrength, colour = Age)) + geom_point()
str(concrete)
concrete$cutcem <- cut2(concrete$Cement)
?cut2
ggplot(training, aes(x = 1:1030, y = CompressiveStrength, colour = Age)) + geom_point()
str(training)
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = Age)) + geom_point()
str(training)
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = Cement)) + geom_point()
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = BlastFurnaceSlag)) + geom_point()
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = FlyAsh)) + geom_point()
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = Water)) + geom_point()
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = Superplasticizer)) + geom_point()
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = CoarseAggregate)) + geom_point()
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = FineAggregate)) + geom_point()
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = Age)) + geom_point()
training$cutage <- cut2(training$age,4)
training$cutage <- cut2(training$Age,4)
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = cutage)) + geom_point()
str(training)
training$cutcem <- cut2(training$Cement,4)
training$cutslag <- cut2(training$BlastFurnaceSlag,4)
training$cutfly <- cut2(training$FlyAsh,4)
training$cutwtr <- cut2(training$Water,4)
training$cutplas <- cut2(training$Superplasticizer,4)
training$cutcoar <- cut2(training$CoarseAggregate,4)
training$cutfine <- cut2(training$FineAggregate,4)
training$cutage <- cut2(training$Age,4)
str(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
summary(training$Superplasticizer)
log(0.1)
log(1.1)
hist(log(training$Superplasticizer+1))
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?cut2
training$cutcem <- cut2(training$Cement,g = 4)
str(concrete)
training$cutslag <- cut2(training$BlastFurnaceSlag,g = 4)
training$cutfly <- cut2(training$FlyAsh,g = 4)
training$cutwtr <- cut2(training$Water,g = 4)
training$cutplas <- cut2(training$Superplasticizer,g = 4)
training$cutcoar <- cut2(training$CoarseAggregate,g = 4)
training$cutfine <- cut2(training$FineAggregate,g = 4)
training$cutage <- cut2(training$Age,g = 4)
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = cutage)) + geom_point()
str(concrete)
str(concrete)
str(training)
str(training)
str(training[9:17])
names(training[10:17])
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = cutcem)) + geom_point()
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = cutslag)) + geom_point()
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = cutfly)) + geom_point()
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = cutwtr)) + geom_point()
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = cutplas)) + geom_point()
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = cutcoar)) + geom_point()
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = cutfine)) + geom_point()
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = cutage)) + geom_point()
training$cutage <- cut2(training$Age,g = 8)
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = cutage)) + geom_point()
training$cutage <- cut2(training$Age,g = 2)
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = cutage)) + geom_point()
training$cutage <- cut2(training$Age,g = 3)
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = cutage)) + geom_point()
training$cutage <- cut2(training$Age,g = 5)
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = cutage)) + geom_point()
training$cutage <- cut2(training$Age,g = 6)
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = cutage)) + geom_point()
training$cutage <- cut2(training$Age,g = 7)
ggplot(training, aes(x = 1:774, y = CompressiveStrength, colour = cutage)) + geom_point()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?preProcess
sum(is.na(training))
str(training)
str(training)
str(traininng)
str(training)
names(training)
summary(training[58:69])
summary(log10(training[58:69]))
summary(log10(training[58:69]+1))
summary(log(training[58:69]+1))
summary(training[58:69]+1)
summary(training[58:69])
preProc <- preProcess(training[58:69], method = 'pca', thresh = 0.90)
str(preProc)
trainPC <- predict(preProc, training[58:69])
str(trainPC)
rm(list = ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
tdata <- training[58:69]
names(training)
tdata <- training[c(1,58:69)]
preProc <- preProcess(tdata[-1], method = 'pca', thresh = 0.80)
trainPC <- predict(preProc, tdata[-1])
str(trainPC)
str(tdata)
trainPC$diagnosis <- tdata$diagnosis
fit1 <- train(diagnosis ~ ., method = 'glm', data = tdata)
install.packages("e1071")
fit1 <- train(diagnosis ~ ., method = 'glm', data = tdata)
str(fit1)
fit1 <- train(diagnosis ~ ., method = 'glm', data = tdata, preProcess = 'pca', thresh = 0.80)
fit1 <- train(diagnosis ~ ., method = 'glm', data = tdata)
fit2 <- train(diagnosis ~ ., method = 'glm', data = trainPC)
testSmall <- testing[c(1,58:69)]
testPC <- predict(preProc, testSmall[-1])
testPC$diagnosis <- testSmall$diagnosis
confusionMatrix(testSmall$diagnosis, predict(fit1, testSmall))
confusionMatrix(testSmall$diagnosis, predict(fit2, testPC))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
inTrain <- createDataPartition(segmentationOriginal$Case, 0.75, list = FALSE)
?createDataPartition
inTrain <- createDataPartition(segmentationOriginal$Case, p = 0.75, list = FALSE)
inTrain
inTrain <- createDataPartition(segmentationOriginal$Case, p = 0.75)
str(inTrain)
inTrain <- createDataPartition(segmentationOriginal$Case, p = 0.75, list = FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
?train
fit <- train(Case ~ ., training, method = 'rpart')
str(fit)
str(fit$finalModel)
str(fit$finalModel)
plot(fit$finalModel)
plot(fit$finalModel, uniform = TRUE)
text(fit$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
inTrain <- createDataPartition(segmentationOriginal$Case, p = 0.70, list = FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
fit <- train(Case ~ ., training, method = 'rpart')
plot(fit$finalModel, uniform = TRUE)
text(fit$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
str(training)
table(segmentationOriginal$Case)
inTrain <- segmentationOriginal$Case == 'Train'
training <- segmentationOriginal[inTrain,]
fit <- train(Case ~ ., training, method = 'rpart')
str(training)
fit <- train(Class ~ ., training, method = 'rpart')
plot(fit$finalModel, uniform = TRUE)
text(fit$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
test1 <- data.frame(TotalIntenCh2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1 = 2)
test2 <- data.frame(TotalIntenCh2 = 50000, FiberWidthCh1 = 10, VarIntenCh4 = 100)
test3 <- data.frame(TotalIntenCh2 = 57000, FiberWidthCh1 = 8, VarIntenCh4 = 100)
test4 <- data.frame(PerimStatusCh1 = 2, FiberWidthCh1 = 8, VarIntenCh4 = 100)
set.seed(125)
fit <- train(Class ~ ., training, method = 'rpart')
plot(fit$finalModel, uniform = TRUE)
text(fit$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
predict(fit$finalMode, newdata = test1)
predict(fit$finalMode, newdata = test2)
predict(fit$finalMode, newdata = test3)
predict(fit$finalMode, newdata = test4)
install.packages("rattle")
library(rattle)
fancyRpartPlot(fit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(fit$finalModel)
test1
test2
test3
test4
library(pgmm)
data(olive)
olive = olive[,-1]
install.package("pgmm")
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
rm(list = ls())
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
fit <- train(Area ~ ., olive, method = 'rpart')
?tree
predict(fit$finalModel, newdata = newdata)
str(olive)
mean(olive$Area)
??tree
tree(fit$finalModel)
fancyRpartPlot(fit$finalModel)
tree(fit$finalModel)
library(caret)
library(rpart)
?tree
??tree
install.packages("tree")
library(tree)
?tree
fit <- tree(Area~.,olive)
predict(fit, newdata = newdata)
plot(fit)
fancyRpartPlot(fit)
plot(fit)
text(fit, use.n = TRUE, all = TRUE, cex = 0.8)
rm(list = ls())
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(trainSA)
names(trainSA)
names(trainSA)
set.seed(13234)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = 'glm', family = 'binomial')
set.seed(13234)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, trainSA, method = 'glm', family = 'binomial')
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
preds <- predict(fit$finalModel, newdata = testSA)
preds
missClass(testSA$chd, preds)
str(trainSA)
?SAheart
set.seed(13234)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, trainSA, method = 'glm', family = 'binomial')
testPred <- predict(fit$finalModel, newdata = testSA)
trainPred <- predict(fit$finalModel, newdata = trainSA)
missClass(testSA$chd, testPred)
missClass(trainSA$chd, trainPred)
set.seed(13234)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl - 1, trainSA, method = 'glm', family = 'binomial')
testPred <- predict(fit$finalModel, newdata = testSA)
trainPred <- predict(fit$finalModel, newdata = trainSA)
missClass(testSA$chd, testPred)
missClass(trainSA$chd, trainPred)
summary(trainSA$chd)
summary(trainPred)
table(trainPred)
summary(testSA$chd)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
inTrain <- sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[inTrain,]
testSA = SAheart[-inTrain,]
set.seed(13234)
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, trainSA, family = 'binomial')
trainPred <- predict(fit, newdata = trainSA)
testPred <- predict(fit, newdata = testSA)
missClass(trainSA$chd, trainPred)
missClass(testSA$chd, testPred)
set.seed(13234)
fit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl - 1, trainSA, family = 'binomial')
trainPred <- predict(fit, newdata = trainSA)
testPred <- predict(fit, newdata = testSA)
missClass(testSA$chd, testPred)
missClass(trainSA$chd, trainPred)
rm(list = ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
fit <- train(y ~ ., vowel.train, method = 'rf', importance = TRUE)
varImp(fit$finalModel)
str(vowel.train)
importance(fit$finalModel)
str(importance(fit$finalModel))
order(importance(fit$finalModel)[,13])
(1:10)[order(importance(fit$finalModel)[,13])]
set.seed(33833)
fit <- train(y ~ ., vowel.train, method = 'rf', importance = TRUE)
library(caret)
?preProcess
library(installr)
install.MikTeX
install.MikTeX()
require(rCharts)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male'))
n1
haireye <- as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male'))
n1
subset(haireye, Sex == 'Male')
names(subset(haireye, Sex == 'Male'))
require(rCharts)
haireye <- as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male'))
n1$save('fig/n1.html', cdn = TRUE)
n1
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
tst <- kmeans(iris[,-5], k = 5)
tst <- kmeans(iris[,-5], 5)
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1$print("chart3")
install.package('morris')
install.packages('morris')
install.packages('Morris')
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1$print("chart3")
n1
rm(list= ls())
setwd("C:/Users/Twalorn/repos/carmpg")
library(slidify)
author(ClassAppSlides)
author('ClassAppSlides')
slidify('index.Rmd')
library(shiny)
browseURL('index.html')
getwd()
list.files()
getwd()
setwd('..')
getwd()
author('SlidesClass')
browseURL(url = index.html)
browseURL(url = 'index.html')
browseURL(url = 'index.html')
runApp()
setwd("C:/Users/Twalorn/repos/carmpg/shinyapp")
runApp()
runApp()
browseURL(url = 'index.html')
setwd("C:/Users/Twalorn/repos/carmpg/SlidesClass")
setwd("C:/Users/Twalorn/repos/carmpg/SlidesClass")
browseURL(url = 'index.html')
browseURL(url = 'index.html')
setwd("C:/Users/Twalorn/repos/carmpg/shinyapp")
setwd("C:/Users/Twalorn/repos/carmpg/SlidesClass")
list.files()
browseURL(url = 'index.html')
browseURL(url = 'index.html')
fit <- lm(mpg ~ wt, mtcars)
anova(fit)
summary(fit)
residuals(fit)
?fit
str(fit)
fit$model
str(fit)
fit$effects
fit$rank
fit$qr
str(summary(fit))
names(summary(fit))
summary(fit)$terms
summary(fit)$aliased
summary(fit)$coefficients
getwd()
